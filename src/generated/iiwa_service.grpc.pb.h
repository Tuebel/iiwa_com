// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: iiwa_service.proto
#ifndef GRPC_iiwa_5fservice_2eproto__INCLUDED
#define GRPC_iiwa_5fservice_2eproto__INCLUDED

#include "iiwa_service.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace iiwa_com {

// Control the KUKA iiwa robot via RPC calls.
// Receive information from the KUKA iiwa robot via streaming calls.
class IiwaService final {
 public:
  static constexpr char const* service_full_name() {
    return "iiwa_com.IiwaService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // stream the cartesian pose from the robot
    std::unique_ptr< ::grpc::ClientReaderInterface< ::iiwa_com::CartesianPose>> StreamCartesianPose(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::iiwa_com::CartesianPose>>(StreamCartesianPoseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianPose>> AsyncStreamCartesianPose(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianPose>>(AsyncStreamCartesianPoseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianPose>> PrepareAsyncStreamCartesianPose(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianPose>>(PrepareAsyncStreamCartesianPoseRaw(context, request, cq));
    }
    // stream the cartesian state from the robot
    std::unique_ptr< ::grpc::ClientReaderInterface< ::iiwa_com::CartesianState>> StreamCartesianState(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::iiwa_com::CartesianState>>(StreamCartesianStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianState>> AsyncStreamCartesianState(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianState>>(AsyncStreamCartesianStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianState>> PrepareAsyncStreamCartesianState(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianState>>(PrepareAsyncStreamCartesianStateRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::iiwa_com::CartesianPose>* StreamCartesianPoseRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianPose>* AsyncStreamCartesianPoseRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianPose>* PrepareAsyncStreamCartesianPoseRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::iiwa_com::CartesianState>* StreamCartesianStateRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianState>* AsyncStreamCartesianStateRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iiwa_com::CartesianState>* PrepareAsyncStreamCartesianStateRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::iiwa_com::CartesianPose>> StreamCartesianPose(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::iiwa_com::CartesianPose>>(StreamCartesianPoseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianPose>> AsyncStreamCartesianPose(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianPose>>(AsyncStreamCartesianPoseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianPose>> PrepareAsyncStreamCartesianPose(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianPose>>(PrepareAsyncStreamCartesianPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::iiwa_com::CartesianState>> StreamCartesianState(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::iiwa_com::CartesianState>>(StreamCartesianStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianState>> AsyncStreamCartesianState(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianState>>(AsyncStreamCartesianStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianState>> PrepareAsyncStreamCartesianState(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iiwa_com::CartesianState>>(PrepareAsyncStreamCartesianStateRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::iiwa_com::CartesianPose>* StreamCartesianPoseRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request) override;
    ::grpc::ClientAsyncReader< ::iiwa_com::CartesianPose>* AsyncStreamCartesianPoseRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::iiwa_com::CartesianPose>* PrepareAsyncStreamCartesianPoseRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianPoseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::iiwa_com::CartesianState>* StreamCartesianStateRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request) override;
    ::grpc::ClientAsyncReader< ::iiwa_com::CartesianState>* AsyncStreamCartesianStateRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::iiwa_com::CartesianState>* PrepareAsyncStreamCartesianStateRaw(::grpc::ClientContext* context, const ::iiwa_com::StreamCartesianStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamCartesianPose_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamCartesianState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // stream the cartesian pose from the robot
    virtual ::grpc::Status StreamCartesianPose(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianPoseRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianPose>* writer);
    // stream the cartesian state from the robot
    virtual ::grpc::Status StreamCartesianState(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianStateRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianState>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamCartesianPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamCartesianPose() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamCartesianPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCartesianPose(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianPoseRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianPose>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCartesianPose(::grpc::ServerContext* context, ::iiwa_com::StreamCartesianPoseRequest* request, ::grpc::ServerAsyncWriter< ::iiwa_com::CartesianPose>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamCartesianState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamCartesianState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamCartesianState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCartesianState(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianStateRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCartesianState(::grpc::ServerContext* context, ::iiwa_com::StreamCartesianStateRequest* request, ::grpc::ServerAsyncWriter< ::iiwa_com::CartesianState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamCartesianPose<WithAsyncMethod_StreamCartesianState<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_StreamCartesianPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamCartesianPose() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamCartesianPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCartesianPose(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianPoseRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianPose>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamCartesianState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamCartesianState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamCartesianState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCartesianState(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianStateRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamCartesianPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StreamCartesianPose() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamCartesianPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCartesianPose(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianPoseRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianPose>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCartesianPose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamCartesianState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StreamCartesianState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamCartesianState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCartesianState(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianStateRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCartesianState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamCartesianPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_StreamCartesianPose() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::iiwa_com::StreamCartesianPoseRequest, ::iiwa_com::CartesianPose>(std::bind(&WithSplitStreamingMethod_StreamCartesianPose<BaseClass>::StreamedStreamCartesianPose, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_StreamCartesianPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamCartesianPose(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianPoseRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianPose>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamCartesianPose(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::iiwa_com::StreamCartesianPoseRequest,::iiwa_com::CartesianPose>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamCartesianState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_StreamCartesianState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::iiwa_com::StreamCartesianStateRequest, ::iiwa_com::CartesianState>(std::bind(&WithSplitStreamingMethod_StreamCartesianState<BaseClass>::StreamedStreamCartesianState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_StreamCartesianState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamCartesianState(::grpc::ServerContext* context, const ::iiwa_com::StreamCartesianStateRequest* request, ::grpc::ServerWriter< ::iiwa_com::CartesianState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamCartesianState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::iiwa_com::StreamCartesianStateRequest,::iiwa_com::CartesianState>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamCartesianPose<WithSplitStreamingMethod_StreamCartesianState<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_StreamCartesianPose<WithSplitStreamingMethod_StreamCartesianState<Service > > StreamedService;
};

}  // namespace iiwa_com


#endif  // GRPC_iiwa_5fservice_2eproto__INCLUDED
